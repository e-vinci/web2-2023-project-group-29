#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('api2:server');
const http = require('http');
// eslint-disable-next-line import/no-extraneous-dependencies
const dotenv = require('dotenv');
const client = require('../db_config');
const app = require('../app');

// Config the env file to read from secrets.env
dotenv.config({ path: 'secrets.env' });

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

// Connect to the database before starting the server
client.connect()
  .then(() => {
    console.log('Connected to the database');

    // Listen on provided port, on all network interfaces
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch((err) => {
    console.error('Error connecting to the database:', err);
    process.exit(1);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const potentialPort = parseInt(val, 10);

  if (Number.isNaN(potentialPort)) {
    // named pipe
    return val;
  }

  if (potentialPort >= 0) {
    // port number
    return potentialPort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      // eslint-disable-next-line no-console
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      // eslint-disable-next-line no-console
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
